//    @Value("${spring.kafka.producer.bootstrap-server}")
//    private String bootstrapServers;
//    @Value("${spring.kafka.producer.key-serializer}")
//    private String keySerializer;
//    @Value("${spring.kafka.producer.value-serializer}")
//    private String valueSerializer;
//    @Value("${spring.kafka.producer.acks}")
//    private String acks;
//    @Value("${spring.kafka.producer.properties.request.timeout.ms}")
//    private String deliveryTimeout;
//    @Value("${spring.kafka.producer.properties.enable.idempotence}")
//    private boolean idempotence;
//
//    Map<String,Object> producerConfigs(){
//        Map<String,Object> config = new HashMap<>();
//
//        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
//        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,keySerializer);
//        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,valueSerializer);
//        config.put(ProducerConfig.ACKS_CONFIG, acks);
//        config.put(ProducerConfig.DELIVERY_TIMEOUT_MS_CONFIG,deliveryTimeout);
//        config.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG,true);
//
//        return config;
//    }
//    @Bean
//    ProducerFactory<String, ProductEvent> producerFactory(){
//        return new DefaultKafkaProducerFactory<>(producerConfigs());
//    }
//    @Bean
//    KafkaTemplate<String,ProductEvent> kafkaTemplate(){
//        return new KafkaTemplate<String,ProductEvent>(producerFactory());
//    }

